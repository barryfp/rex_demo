const byte AQ_LEFT = 0
const byte AQ_RIGHT = 1

const int ANIM_SPEED = 10

component provides BigButton requires ui.Font, time.Timer timer {
	
	Font font
	char text[]
	
	int width
	int height
	
	int textWidth
	int textHeight
	
	int textX
	int textY
	
	Rect bounds = new Rect()
	
	Color offColor = new Color(100, 100, 140, 255)
	Color offColorBorder = new Color(90, 90, 120, 255)
	
	Color onColor = new Color(160, 160, 200, 255)
	Color onColorBorder = new Color(90, 90, 120, 255)
	
	Color currentColor = offColor
	Color currentColorBorder = offColorBorder
	
	Color aqColor = new Color(170, 170, 210, 255)
	
	Color textColor = new Color(190, 190, 190, 255)
	
	Thread animThread
	bool isActive
	byte aqDir
	int aqPos
	int aqWidth
	
	BigButton:BigButton(char name[])
		{
		text = name
		font = new Font("SourceSansPro.ttf", 150)
		
		textWidth = font.getTextWidth(text)
		textHeight = font.getFontMetrics().height// - font.getFontMetrics().descent
		}
	
	void BigButton:setSize(int w, int h)
		{
		width = w
		height = h
		
		bounds.width = w
		bounds.height = h
		
		aqWidth = (width * 20) / 100
		
		textX = (width / 2) - textWidth / 2
		textY = (height / 2) - textHeight / 2
		}
	
	void athread()
		{
		while (isActive)
			{
			timer.sleep(ANIM_SPEED)
			
			if (aqDir == AQ_RIGHT)
				{
				aqPos += 1
				
				if (aqPos + aqWidth > width)
					{
					aqDir = AQ_LEFT
					aqPos -= 2
					}
				}
				else
				{
				aqPos -= 1
				
				if (aqPos == INT_MAX)
					{
					aqDir = AQ_RIGHT
					aqPos = 1
					}
				}
			
			postRepaint()
			}
		}
	
	void BigButton:setColor(Color c)
		{
		
		}
	
	void BigButton:setActiveColor(Color c)
		{
		
		}
	
	void BigButton:setActive(bool b)
		{
		isActive = b
		
		if (isActive)
			{
			aqPos = 0
			aqDir = AQ_RIGHT
			animThread = asynch::athread()
			}
			else
			{
			animThread.join()
			}
		}
	
	Rect BigButton:getBounds()
		{
		return bounds
		}
	
	void BigButton:click(int x, int y, int button)
		{
		emitevent click()
		}
	
	void BigButton:postRepaint()
		{
		emitevent repaint()
		}
	
	void BigButton:paint(Canvas c)
		{
		c.drawRect(new Rect2D(xPosition, yPosition, width, height, currentColor))
		
		if (isActive)
			{
			c.drawRect(new Rect2D(xPosition+aqPos, yPosition, aqWidth, height, aqColor))
			}
		
		c.drawRectOutline(new Rect2D(xPosition, yPosition, width, height, currentColorBorder))
		
		c.drawText(new Point2D(xPosition + textX, yPosition + textY, textColor), font, text)
		}
	
	void BigButton:setPosition(int x, int y)
		{
		xPosition = x
		yPosition = y
		
		bounds.x = x
		bounds.y = y
		}
	
	Point BigButton:getPosition()
		{
		return null
		}
	
	WH BigButton:getPreferredSize()
		{
		return null
		}
	
	void BigButton:mouseOver()
		{
		currentColor = onColor
		currentColorBorder = onColorBorder
		
		postRepaint()
		}
	
	void BigButton:mouseOut()
		{
		currentColor = offColor
		currentColorBorder = offColorBorder
		
		postRepaint()
		}
	
	}